// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/punkestu/ecommerce-go/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Product is an autogenerated mock type for the Product type
type Product struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Product) Create(_a0 entity.Product) (int32, error) {
	ret := _m.Called(_a0)

	var r0 int32
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Product) (int32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(entity.Product) int32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int32)
	}

	if rf, ok := ret.Get(1).(func(entity.Product) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *Product) GetAll() ([]*entity.Product, error) {
	ret := _m.Called()

	var r0 []*entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*entity.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*entity.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *Product) GetByID(_a0 int32) (*entity.Product, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) (*entity.Product, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int32) *entity.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: _a0
func (_m *Product) GetByName(_a0 string) ([]*entity.Product, error) {
	ret := _m.Called(_a0)

	var r0 []*entity.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*entity.Product, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []*entity.Product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProduct creates a new instance of Product. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProduct(t interface {
	mock.TestingT
	Cleanup(func())
}) *Product {
	mock := &Product{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
