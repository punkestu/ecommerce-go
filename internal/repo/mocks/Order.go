// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/punkestu/ecommerce-go/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Order) Create(_a0 *entity.Order) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.Order) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.Order) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*entity.Order) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: _a0
func (_m *Order) GetByID(_a0 string) (*entity.Order, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByProduct provides a mock function with given fields: _a0
func (_m *Order) GetByProduct(_a0 int32) ([]*entity.Order, error) {
	ret := _m.Called(_a0)

	var r0 []*entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) ([]*entity.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int32) []*entity.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: _a0
func (_m *Order) GetByUser(_a0 int32) ([]*entity.Order, error) {
	ret := _m.Called(_a0)

	var r0 []*entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(int32) ([]*entity.Order, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int32) []*entity.Order); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateState provides a mock function with given fields: _a0, _a1
func (_m *Order) UpdateState(_a0 string, _a1 entity.OrderState) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, entity.OrderState) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
